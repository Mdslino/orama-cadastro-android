/**
 * Criação de Contas
 * API de Criação de Contas.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: cadastro_api@orama.com.br
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.model;

import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

/**
 * Modelo de Conta bancária no sistema bancário brasileiro. Deve ser enviado somente uma conta bancária na lista de &#39;contaBancaria&#39;.
 **/
@ApiModel(description = "Modelo de Conta bancária no sistema bancário brasileiro. Deve ser enviado somente uma conta bancária na lista de 'contaBancaria'.")
public class ContaBancaria {
  
  @SerializedName("banco")
  private String banco = null;
  public enum TipoEnum {
     CC,  CP, 
  };
  @SerializedName("tipo")
  private TipoEnum tipo = CC;
  @SerializedName("agencia")
  private String agencia = null;
  @SerializedName("conta")
  private String conta = null;
  @SerializedName("digito")
  private String digito = null;
  @SerializedName("contaConjunta")
  private Boolean contaConjunta = false;
  @SerializedName("segundoParticipanteTitular")
  private Boolean segundoParticipanteTitular = false;
  @SerializedName("cpfCotitular")
  private String cpfCotitular = null;

  /**
   * Banco da conta, string com o número do banco
   **/
  @ApiModelProperty(required = true, value = "Banco da conta, string com o número do banco")
  public String getBanco() {
    return banco;
  }
  public void setBanco(String banco) {
    this.banco = banco;
  }

  /**
   * Tipo da conta bancária. O tipo deve ser conta corrente (CC) ou conta poupança (CP).
   **/
  @ApiModelProperty(required = true, value = "Tipo da conta bancária. O tipo deve ser conta corrente (CC) ou conta poupança (CP).")
  public TipoEnum getTipo() {
    return tipo;
  }
  public void setTipo(TipoEnum tipo) {
    this.tipo = tipo;
  }

  /**
   * Agência da conta bancária
   **/
  @ApiModelProperty(required = true, value = "Agência da conta bancária")
  public String getAgencia() {
    return agencia;
  }
  public void setAgencia(String agencia) {
    this.agencia = agencia;
  }

  /**
   * Número da conta bancária sem o dígito verificador
   **/
  @ApiModelProperty(required = true, value = "Número da conta bancária sem o dígito verificador")
  public String getConta() {
    return conta;
  }
  public void setConta(String conta) {
    this.conta = conta;
  }

  /**
   * Digito verificador da conta bancária
   **/
  @ApiModelProperty(required = true, value = "Digito verificador da conta bancária")
  public String getDigito() {
    return digito;
  }
  public void setDigito(String digito) {
    this.digito = digito;
  }

  /**
   * Informação que define se é uma conta conjunta. Caso seja, deve ser definido como true.
   **/
  @ApiModelProperty(required = true, value = "Informação que define se é uma conta conjunta. Caso seja, deve ser definido como true.")
  public Boolean getContaConjunta() {
    return contaConjunta;
  }
  public void setContaConjunta(Boolean contaConjunta) {
    this.contaConjunta = contaConjunta;
  }

  /**
   * Informação se o segundo participante (co-titular) é o titular da conta, caso não seja, o primeiro participante quem esta preenchendo a conta é o titular.
   **/
  @ApiModelProperty(required = true, value = "Informação se o segundo participante (co-titular) é o titular da conta, caso não seja, o primeiro participante quem esta preenchendo a conta é o titular.")
  public Boolean getSegundoParticipanteTitular() {
    return segundoParticipanteTitular;
  }
  public void setSegundoParticipanteTitular(Boolean segundoParticipanteTitular) {
    this.segundoParticipanteTitular = segundoParticipanteTitular;
  }

  /**
   * CPF do co-titular caso seja conta conjunta. CPF deve ser válido. O CPF tem que ter os 11 dígitos com a máscara incluindo os pontos e hífen.  - Obrigatório caso a conta bancária seja conta conjunta
   **/
  @ApiModelProperty(value = "CPF do co-titular caso seja conta conjunta. CPF deve ser válido. O CPF tem que ter os 11 dígitos com a máscara incluindo os pontos e hífen.  - Obrigatório caso a conta bancária seja conta conjunta")
  public String getCpfCotitular() {
    return cpfCotitular;
  }
  public void setCpfCotitular(String cpfCotitular) {
    this.cpfCotitular = cpfCotitular;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContaBancaria contaBancaria = (ContaBancaria) o;
    return (this.banco == null ? contaBancaria.banco == null : this.banco.equals(contaBancaria.banco)) &&
        (this.tipo == null ? contaBancaria.tipo == null : this.tipo.equals(contaBancaria.tipo)) &&
        (this.agencia == null ? contaBancaria.agencia == null : this.agencia.equals(contaBancaria.agencia)) &&
        (this.conta == null ? contaBancaria.conta == null : this.conta.equals(contaBancaria.conta)) &&
        (this.digito == null ? contaBancaria.digito == null : this.digito.equals(contaBancaria.digito)) &&
        (this.contaConjunta == null ? contaBancaria.contaConjunta == null : this.contaConjunta.equals(contaBancaria.contaConjunta)) &&
        (this.segundoParticipanteTitular == null ? contaBancaria.segundoParticipanteTitular == null : this.segundoParticipanteTitular.equals(contaBancaria.segundoParticipanteTitular)) &&
        (this.cpfCotitular == null ? contaBancaria.cpfCotitular == null : this.cpfCotitular.equals(contaBancaria.cpfCotitular));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.banco == null ? 0: this.banco.hashCode());
    result = 31 * result + (this.tipo == null ? 0: this.tipo.hashCode());
    result = 31 * result + (this.agencia == null ? 0: this.agencia.hashCode());
    result = 31 * result + (this.conta == null ? 0: this.conta.hashCode());
    result = 31 * result + (this.digito == null ? 0: this.digito.hashCode());
    result = 31 * result + (this.contaConjunta == null ? 0: this.contaConjunta.hashCode());
    result = 31 * result + (this.segundoParticipanteTitular == null ? 0: this.segundoParticipanteTitular.hashCode());
    result = 31 * result + (this.cpfCotitular == null ? 0: this.cpfCotitular.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContaBancaria {\n");
    
    sb.append("  banco: ").append(banco).append("\n");
    sb.append("  tipo: ").append(tipo).append("\n");
    sb.append("  agencia: ").append(agencia).append("\n");
    sb.append("  conta: ").append(conta).append("\n");
    sb.append("  digito: ").append(digito).append("\n");
    sb.append("  contaConjunta: ").append(contaConjunta).append("\n");
    sb.append("  segundoParticipanteTitular: ").append(segundoParticipanteTitular).append("\n");
    sb.append("  cpfCotitular: ").append(cpfCotitular).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
